{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","props","state","outline","outlineColor","defaultRoll","dieSize","disableIndividual","margin","numDice","sides","rollTime","faceColor","dotColor","diceTotal","rolling","handleChange","bind","rollDone","rollAll","showHideControls","e","value","target","type","parseInt","min","max","this","name","setState","values","reactDice","window","innerWidth","document","getElementById","classList","remove","add","className","id","onClick","style","display","paddingLeft","ref","c","Component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"qPA2IeA,E,kDAtIb,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IACDC,MAAQ,CACXC,SAAS,EACTC,aAAc,UACdC,YAAa,EACbC,QAAS,GACTC,mBAAmB,EACnBC,OAAQ,GACRC,QAAS,EACTC,MAAO,EACPC,SAAU,EACVC,UAAW,UACXC,SAAU,UACVC,UAAW,MACXC,SAAS,GAEX,EAAKC,aAAe,EAAKA,aAAaC,KAAlB,gBACpB,EAAKC,SAAW,EAAKA,SAASD,KAAd,gBAChB,EAAKE,QAAU,EAAKA,QAAQF,KAAb,gBACf,EAAKG,iBAAmB,EAAKA,iBAAiBH,KAAtB,gBApBP,E,gDAuBnB,SAAaI,GACX,IAAIC,EAAQD,EAAEE,OAAOD,MACC,WAAlBD,EAAEE,OAAOC,QACXF,EAAQG,SAASJ,EAAEE,OAAOD,MAAO,KACrBD,EAAEE,OAAOG,IACnBJ,EAAQD,EAAEE,OAAOG,IACRJ,EAAQD,EAAEE,OAAOI,MAC1BL,EAAQD,EAAEE,OAAOI,MAGC,aAAlBN,EAAEE,OAAOC,OACXF,GAASM,KAAK1B,MAAMmB,EAAEE,OAAOM,OAE/BD,KAAKE,SAAL,eACGT,EAAEE,OAAOM,KAAOP,M,sBAIrB,SAASA,EAAOS,GAEdH,KAAKE,SAAS,CAAEhB,UAAWQ,EAAOP,SAAS,M,qBAG7C,WACEa,KAAKI,UAAUb,UACfS,KAAKE,SAAS,CAAEf,SAAS,M,8BAG3B,WACMkB,OAAOC,WAAa,IACtBC,SAASC,eAAe,gBAAgBC,UAAUC,OAAO,QAEzDH,SAASC,eAAe,gBAAgBC,UAAUE,IAAI,U,+BAI1D,WAGMN,OAAOC,WAAa,IACtBC,SAASC,eAAe,gBAAgBC,UAAUC,OAAO,QAEzDH,SAASC,eAAe,gBAAgBC,UAAUE,IAAI,U,kCAI1D,c,oBAIA,WAAU,IAAD,OACSX,KAAV1B,MAEN,OACE,sBAAKsC,UAAU,YAAf,UACE,qBAAKA,UAAU,WAAWC,GAAG,iBAE7B,sBAAKD,UAAU,WAAf,UACE,qBAAKA,UAAU,MAAf,SACE,+BACE,wBAAQA,UAAU,kBAAkBE,QAASd,KAAKT,QAAlD,sBAGC,MAJH,iCAQF,qBAAKqB,UAAU,MAAf,SACE,qBAAIA,UAAU,eAAd,wBAEE,sBACEG,MAAO,CACLC,QAAShB,KAAK1B,MAAMa,QAAU,OAAS,eACvC8B,YAAa,OAHjB,SAMGjB,KAAK1B,MAAMY,YAEd,sBACE0B,UAAU,eACVG,MAAO,CACLC,QAAShB,KAAK1B,MAAMa,QAAU,eAAiB,QAHnD,UAME,qBAAKyB,UAAU,qBACf,qBAAKA,UAAU,qBACf,qBAAKA,UAAU,qBACf,qBAAKA,UAAU,qBACf,qBAAKA,UAAU,qBACf,qBAAKA,UAAU,qBACf,qBAAKA,UAAU,qBACf,qBAAKA,UAAU,qBACf,qBAAKA,UAAU,gCAKvB,qBAAKA,UAAU,WAAf,SACE,qBAAKA,UAAU,MAAf,SACE,cAAC,IAAD,2BACMZ,KAAK1B,OADX,IAEEgB,SAAUU,KAAKV,SACf4B,IAAK,SAACC,GAAD,OAAQ,EAAKf,UAAYe,iB,GA9H1BC,aCQHC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFzB,SAASC,eAAe,SAM1Ba,M","file":"static/js/main.e9842b83.chunk.js","sourcesContent":["import React, {Component} from 'react'\nimport ReactDice from 'react-dice-complete'\nimport 'react-dice-complete/dist/react-dice-complete.css'\n\nclass App extends Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      outline: false,\n      outlineColor: '#ffffff',\n      defaultRoll: 1,\n      dieSize: 60,\n      disableIndividual: false,\n      margin: 15,\n      numDice: 2,\n      sides: 6,\n      rollTime: 2,\n      faceColor: '#ffff00',\n      dotColor: '#000000',\n      diceTotal: '...',\n      rolling: false,\n    }\n    this.handleChange = this.handleChange.bind(this)\n    this.rollDone = this.rollDone.bind(this)\n    this.rollAll = this.rollAll.bind(this)\n    this.showHideControls = this.showHideControls.bind(this)\n  }\n\n  handleChange(e) {\n    let value = e.target.value\n    if (e.target.type === 'number') {\n      value = parseInt(e.target.value, 10)\n      if (value < e.target.min) {\n        value = e.target.min\n      } else if (value > e.target.max) {\n        value = e.target.max\n      }\n    }\n    if (e.target.type === 'checkbox') {\n      value = !this.state[e.target.name]\n    }\n    this.setState({\n      [e.target.name]: value,\n    })\n  }\n\n  rollDone(value, values) {\n    // console.log('done', value, values)\n    this.setState({ diceTotal: value, rolling: false })\n  }\n\n  rollAll() {\n    this.reactDice.rollAll()\n    this.setState({ rolling: true })\n  }\n\n  showHideControls() {\n    if (window.innerWidth < 576) {\n      document.getElementById('collapseForm').classList.remove('show')\n    } else {\n      document.getElementById('collapseForm').classList.add('show')\n    }\n  }\n\n  componentDidMount() {\n    // this.showHideControls()\n    // window.addEventListener('resize', this.showHideControls)\n    if (window.innerWidth < 576) {\n      document.getElementById('collapseForm').classList.remove('show')\n    } else {\n      document.getElementById('collapseForm').classList.add('show')\n    }\n  }\n\n  componentWillUnmount() {\n    // window.removeEventListener('resize', this.showHideControls)\n  }\n\n  render() {\n    let { state } = this\n    let colorStyle = { height: '2.375rem' }\n    return (\n      <div className='dice-test'>\n        <div className='collapse' id='collapseForm'>\n        </div>\n        <div className='row info'>\n          <div className='col'>\n            <h4>\n              <button className='btn btn-primary' onClick={this.rollAll}>\n                Roll All\n              </button>\n              {'   '} or click individual dice\n            </h4>\n          </div>\n\n          <div className='col'>\n            <h4 className='text-primary'>\n              Dice Total:\n              <span\n                style={{\n                  display: this.state.rolling ? 'none' : 'inline-block',\n                  paddingLeft: '5px',\n                }}\n              >\n                {this.state.diceTotal}\n              </span>\n              <div\n                className='sk-cube-grid'\n                style={{\n                  display: this.state.rolling ? 'inline-block' : 'none',\n                }}\n              >\n                <div className='sk-cube sk-cube1' />\n                <div className='sk-cube sk-cube2' />\n                <div className='sk-cube sk-cube3' />\n                <div className='sk-cube sk-cube4' />\n                <div className='sk-cube sk-cube5' />\n                <div className='sk-cube sk-cube6' />\n                <div className='sk-cube sk-cube7' />\n                <div className='sk-cube sk-cube8' />\n                <div className='sk-cube sk-cube9' />\n              </div>\n            </h4>\n          </div>\n        </div>\n        <div className='row dice'>\n          <div className='col'>\n            <ReactDice\n              {...this.state}\n              rollDone={this.rollDone}\n              ref={(c) => (this.reactDice = c)}\n            />\n          </div>\n        </div>\n      </div>\n    )\n  }\n}\n\nexport default App","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}